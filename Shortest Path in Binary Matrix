class Solution {
    public int shortestPathBinaryMatrix(int[][] arr) {
        if(arr[0][0]==1){
            return -1;
        }
        Queue<int []>q=new LinkedList<>();
        int []val=new int[2];
        val[0]=0;
        val[1]=0;
        q.add(val);
        int step=0;
        boolean [][]vis=new boolean[arr.length][arr[0].length];
        while(!q.isEmpty()){
            int size=q.size();
            for(int l=0;l<size;l++){
                int []res=q.poll();
                int i=res[0];
                int j=res[1];
                if(i==arr.length-1 && j==arr[0].length-1){
                    return step+1;
                }
                if(i-1>=0 && !vis[i-1][j] && arr[i-1][j]==0){
                    int []t=new int[2];
                    t[0]=i-1;
                    t[1]=j;
                    q.add(t);
                    vis[i-1][j]=true;
                }
                if(j-1>=0 && !vis[i][j-1] && arr[i][j-1]==0){
                    int []t=new int[2];
                    t[0]=i;
                    t[1]=j-1;
                    q.add(t);
                    vis[i][j-1]=true;
                }
                if(i+1<arr.length && !vis[i+1][j] && arr[i+1][j]==0){
                    int []t=new int[2];
                    t[0]=i+1;
                    t[1]=j;
                    q.add(t);
                    vis[i+1][j]=true;
                }
                if(j+1<arr[0].length && !vis[i][j+1] && arr[i][j+1]==0){
                    int []t=new int[2];
                    t[0]=i;
                    t[1]=j+1;
                    q.add(t);
                    vis[i][j+1]=true;
                }
                if(i+1<arr.length && j+1<arr[0].length && !vis[i+1][j+1] && arr[i+1][j+1]==0){
                    int []t=new int[2];
                    t[0]=i+1;
                    t[1]=j+1;
                    q.add(t);
                    vis[i+1][j+1]=true;
                }
                if(i+1<arr.length && j-1>=0  && !vis[i+1][j-1] && arr[i+1][j-1]==0){
                    int []t=new int[2];
                    t[0]=i+1;
                    t[1]=j-1;
                    q.add(t);
                    vis[i+1][j-1]=true;
                }
                if(i-1>=0 && j+1<arr[0].length  && !vis[i-1][j+1] && arr[i-1][j+1]==0){
                    int []t=new int[2];
                    t[0]=i-1;
                    t[1]=j+1;
                    q.add(t);
                    vis[i-1][j+1]=true;
                }
                if(i-1>=0 && j-1>=0  && !vis[i-1][j-1] && arr[i-1][j-1]==0){
                    int []t=new int[2];
                    t[0]=i-1;
                    t[1]=j-1;
                    q.add(t);
                    vis[i-1][j-1]=true;
                }
            }
            step++;
        }
        return -1;
    }
}
