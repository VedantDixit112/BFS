class Solution {
    Queue<int []>q=new LinkedList<>();
    public int shortestBridge(int[][] arr) {
        boolean flg=true;
        boolean [][]vis=new boolean[arr.length][arr[0].length];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                if(arr[i][j]==1){
                    path(i,j,vis,arr);
                    flg=false;
                    break;
                }
            }
            if(!flg){
                break;
            }
        }
        vis=new boolean[arr.length][arr[0].length];
        int step=0;
        while(!q.isEmpty()){
            int size=q.size();
            for(int i1=0;i1<size;i1++){
                int []res=q.poll();
                int i=res[0];
                int j=res[1];
                if(arr[i][j]==1){
                    return step-1;
                }
                if(i-1>=0 && !vis[i-1][j] && arr[i-1][j]!=-1){
                    vis[i-1][j]=true;
                    int []res1=new int[2];
                    res1[0]=i-1;
                    res1[1]=j;
                    q.add(res1);
                }
                if(j-1>=0 && !vis[i][j-1] && arr[i][j-1]!=-1){
                    vis[i][j-1]=true;
                    int []res1=new int[2];
                    res1[0]=i;
                    res1[1]=j-1;
                    q.add(res1);
                }
                 if(i+1<arr.length && !vis[i+1][j] && arr[i+1][j]!=-1){
                    vis[i+1][j]=true;
                    int []res1=new int[2];
                    res1[0]=i+1;
                    res1[1]=j;
                    q.add(res1);
                }
                 if(j+1<arr[0].length && !vis[i][j+1] && arr[i][j+1]!=-1){
                    vis[i][j+1]=true;
                    int []res1=new int[2];
                    res1[0]=i;
                    res1[1]=j+1;
                    q.add(res1);
                }
            }
            step++;
        }
        return -1;
    }
    public void path(int i,int j,boolean [][]vis,int [][]arr){
        int []res=new int[2];
        res[0]=i;
        res[1]=j;
        q.add(res);
        arr[i][j]=-1;
        vis[i][j]=true;
        if(i-1>=0 && !vis[i-1][j] && arr[i-1][j]==1){
            path(i-1,j,vis,arr);
        }
        if(i+1<arr.length && !vis[i+1][j] && arr[i+1][j]==1){
            path(i+1,j,vis,arr);
        }
        if(j-1>=0 && !vis[i][j-1] && arr[i][j-1]==1){
            path(i,j-1,vis,arr);
        }
        if(j+1<arr[0].length && !vis[i][j+1] && arr[i][j+1]==1){
            path(i,j+1,vis,arr);
        }
    }
}
